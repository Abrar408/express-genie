const <%= entityName %>Service = require("../../services/<%= entityName %>/<%= entityName %>.service");

const {
  <%= entityName.toUpperCase() %>_RESPONSES,
  okResponse,
  badRequestResponse,
  serverErrorResponse,
  createSuccessResponse,
  updateSuccessResponse,
  conflictErrorResponse,
} = require("../constants/responses");

const getAll<%= capitalize(plural(entityName)) %> = async (req, res) => {
  try {
    const result = await <%= entityName %>Service.getAll<%= capitalize(plural(entityName)) %>();


    const response = okResponse(result);
    return res.status(response.status.code).json(response);
  } catch (error) {
    const response = serverErrorResponse(error.message);
    return res.status(response.status.code).json(response);
  }
};

const getSingle<%= capitalize(entityName) %> = async (req, res) => {
  const id = req.params.<%= entityName %>Id;

  try {
    const result = await <%= entityName %>Service.getAll<%= capitalize(plural(entityName)) %>(id);

    if (!result) {
      const response = badRequestResponse(<%= entityName.toUpperCase() %>_RESPONSES.NOT_FOUND)
      return res.status(response.status.code).json(response);
    }

    const response = okResponse(result);
    return res.status(response.status.code).json(response);
  } catch (error) {
    const response = serverErrorResponse(error.message);
    return res.status(response.status.code).json(response);
  }
};

const create<%= capitalize(entityName) %> = async (req, res) => {
  try {
    const result = await <%= entityName %>Service.create<%= capitalize(entityName) %>(req.body);

    if (!result) {
      const response = conflictErrorResponse(ERROR_RESPONSES.CREATE_UNSUCCESSFUL)
      
      return res.status(response.status.code).json(response);
    }

    const response = createSuccessResponse(null,<%= entityName.toUpperCase() %>_RESPONSES.CREATE_SUCCESS)
    
    return res.status(response.status.code).json(response);
  } catch (error) {
    const response = serverErrorResponse(error.message);
    return res.status(response.status.code).json(response);
  }
};

const update<%= capitalize(entityName) %> = async (req, res) => {
  const id = req.params.<%= entityName %>Id;

  try {
    const result = await <%= entityName %>Service.update<%= capitalize(entityName) %>(id, req.body);

    if (!result) {
      
      const response = conflictErrorResponse(ERROR_RESPONSES.UPDATE_UNSUCCESSFUL)
      return res.status(response.status.code).json(response);
    }

    const response = updateSuccessResponse(<%= entityName.toUpperCase() %>_RESPONSES.UPDATE_SUCCESS)
      
    return res.status(response.status.code).json(response);
  } catch (error) {
    const response = serverErrorResponse(error.message);
    return res.status(response.status.code).json(response);
  }
};

const delete<%= capitalize(entityName) %> = async (req, res) => {
  const id = req.params.<%= entityName %>Id;

  try {
    const result = await <%= entityName %>Service.delete<%= capitalize(entityName) %>(id);

    if (!result) {
   
      const response = conflictErrorResponse(ERROR_RESPONSES.DELETE_UNSUCCESSFUL)
      return res.status(response.status.code).json(response);
    }

    const response = updateSuccessResponse(<%= entityName.toUpperCase() %>_RESPONSES.DELETE_SUCCESS)
    return res.status(response.status.code).json(response);
  } catch (error) {
    const response = serverErrorResponse(error.message);
    return res.status(response.status.code).json(response);
  }
};

module.exports = {
  getAll<%= capitalize(plural(entityName)) %>,
  getSingle<%= capitalize(entityName) %>,
  create<%= capitalize(entityName) %>,
  update<%= capitalize(entityName) %>,
  delete<%= capitalize(entityName) %>,
};
